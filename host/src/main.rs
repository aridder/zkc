// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use k256::{
    ecdsa::{signature::Signer, Signature, SigningKey, VerifyingKey},
    EncodedPoint,
};
use methods::{ECDSA_VERIFY_ELF, ECDSA_VERIFY_ID};
use rand_core::OsRng;
use risc0_zkvm::{default_prover, ExecutorEnv, Receipt};

fn prove_ecdsa_verification(
    verifying_key: &VerifyingKey,
    message: &[u8],
    signature: &Signature,
) -> Receipt {
    let input = (verifying_key.to_encoded_point(true), message, signature);
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    prover.prove_elf(env, ECDSA_VERIFY_ELF).unwrap()
}

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    env_logger::init();
    let signing_key = SigningKey::random(&mut OsRng); // Serialize with `::to_bytes()`
    let message = b"This is a message that will be signed, and verified within the zkVM";
    let signature:Signature = signing_key.sign(message);
    let receipt = prove_ecdsa_verification(signing_key.verifying_key(), message, &signature);

    let (encoded_verifying_key, receipt_message): (EncodedPoint, Vec<u8>) =
        receipt.journal.decode().unwrap();
    let verifying_key = VerifyingKey::from_encoded_point(&encoded_verifying_key).unwrap();

    // print message in string
    let message_str = String::from_utf8(receipt_message).unwrap();
    println!("message_str: {:?}", message_str);

    // Optional: Verify receipt to confirm that recipients will also be able to
    // verify your receipt
    receipt.verify(ECDSA_VERIFY_ID).unwrap();

    println!("Receipt verified successfully!");
}
