// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use risc0_zkvm::{default_prover, ExecutorEnv, Receipt};

use methods::{JWT_VERIFY_ELF, JWT_VERIFY_ID};

static VC: &str = r#"{
    "credentialSubject": {
        "dateOfBirth": "01.05.1988",
        "id": "did:key:z6Mkupors21MizHYzXxgvU3rPC7cWtSk9Papif2caQsfzX1T"
    },
    "issuer": { "id": "did:key:z6MkrbwwWbJMkExK7To2qdhKFv8KCd2nKAhopRgCyHWjH2bg" },
    "type": [ "VerifiableCredential", "PersonCredential" ],
    "@context": [
        "https://www.w3.org/2018/credentials/v1",
        "https://veramo.io/contexts/profile/v1"
    ],
    "issuanceDate": "2023-11-11T09:14:07.000Z",
    "proof": {
        "type": "JwtProof2020",
        "guest": "eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vdmVyYW1vLmlvL2NvbnRleHRzL3Byb2ZpbGUvdjEiXSwidHlwZSI6WyJWZXJpZmlhYmxlQ3JlZGVudGlhbCIsIlBlcnNvbkNyZWRlbnRpYWwiXSwiY3JlZGVudGlhbFN1YmplY3QiOnsiZGF0ZU9mQmlydGgiOiIwMS4wNS4xOTg4In19LCJzdWIiOiJkaWQ6a2V5Ono2TWt1cG9yczIxTWl6SFl6WHhndlUzclBDN2NXdFNrOVBhcGlmMmNhUXNmelgxVCIsIm5iZiI6MTY5OTY5NDA0NywiaXNzIjoiZGlkOmtleTp6Nk1rcmJ3d1diSk1rRXhLN1RvMnFkaEtGdjhLQ2QybktBaG9wUmdDeUhXakgyYmcifQ.76ksY2vmKksoV3N5b5zmBbaqLaT1Xcb45GIxAn9VhQX6iKzcDKFr-TG5x_7YhGuz5y02_7h7Qu2wuG04kEI0DA"
    }
}"#;


static PUBLIC_KEY: &str = "b485ffcb862a33c9709267794bf85192b44d059788fad133ed5d11fa62a6383f";


// fn prove_ecdsa_verification(
//     verifying_key: &VerifyingKey,
//     message: &[u8],
//     signature: &Signature,
// ) -> Receipt {
//     let input = (verifying_key.to_encoded_point(true), message, signature);
//     let env = ExecutorEnv::builder()
//         .write(&input)
//         .unwrap()
//         .build()
//         .unwrap();
//
//     // Obtain the default prover.
//     let prover = default_prover();
//
//     // Produce a receipt by proving the specified ELF binary.
//     prover.prove_elf(env, JWT_VERIFY_ELF).unwrap()
// }

fn prove_jwt_age_verification(
    age: u32,
    jwt: &str,
    public_key: &str,
) -> Receipt {
    let input = (age, jwt, public_key);
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    prover.prove_elf(env, JWT_VERIFY_ELF).unwrap()
}

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    env_logger::init();
    let jwt_str = "eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vdmVyYW1vLmlvL2NvbnRleHRzL3Byb2ZpbGUvdjEiXSwidHlwZSI6WyJWZXJpZmlhYmxlQ3JlZGVudGlhbCIsIlBlcnNvbkNyZWRlbnRpYWwiXSwiY3JlZGVudGlhbFN1YmplY3QiOnsiZGF0ZU9mQmlydGgiOiIwMS4wNS4xOTg4In19LCJzdWIiOiJkaWQ6a2V5Ono2TWt1cG9yczIxTWl6SFl6WHhndlUzclBDN2NXdFNrOVBhcGlmMmNhUXNmelgxVCIsIm5iZiI6MTY5OTY5NDA0NywiaXNzIjoiZGlkOmtleTp6Nk1rcmJ3d1diSk1rRXhLN1RvMnFkaEtGdjhLQ2QybktBaG9wUmdDeUhXakgyYmcifQ.76ksY2vmKksoV3N5b5zmBbaqLaT1Xcb45GIxAn9VhQX6iKzcDKFr-TG5x_7YhGuz5y02_7h7Qu2wuG04kEI0DA";
    let age = 33;
    let receipt = prove_jwt_age_verification(age, jwt_str, PUBLIC_KEY);
    let (age): u32 = receipt.journal.decode().unwrap();
    println!("age: {:?}", age);
    // let signing_key = SigningKey::random(&mut OsRng); // Serialize with `::to_bytes()`
    // let message = b"This is a message that will be signed, and verified within the zkVM";
    // let signature:Signature = signing_key.sign(message);
    // let receipt = prove_ecdsa_verification(signing_key.verifying_key(), message, &signature);

    // let (encoded_verifying_key, receipt_message): (EncodedPoint, Vec<u8>) = receipt.journal.decode().unwrap();
    // let verifying_key = VerifyingKey::from_encoded_point(&encoded_verifying_key).unwrap();
    //
    // // print message in string
    // let message_str = String::from_utf8(receipt_message).unwrap();
    // println!("message_str: {:?}", message_str);

    // Optional: Verify receipt to confirm that recipients will also be able to
    // verify your receipt
    // receipt.verify(ECDSA_VERIFY_ID).unwrap();

    println!("Receipt verified successfully!");
}
