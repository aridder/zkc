// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use risc0_zkvm::{default_prover, ExecutorEnv, Receipt};
use serde::{Deserialize, Serialize};
use std::fs;

use methods::{JWT_VERIFY_ELF, JWT_VERIFY_ID};

#[derive(Serialize, Deserialize, Debug)]
struct PublicKeyHolder {
    public_key: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
struct Proof {
    #[serde(rename = "type")]
    proof_type: String,
    jwt: String,
}


#[derive(Serialize, Deserialize, Debug)]
struct Credential {
    #[serde(rename = "credentialSubject")]
    credential_subject: serde_json::Value,
    issuer: serde_json::Value,
    #[serde(rename = "type")]
    types: Vec<String>,
    #[serde(rename = "@context")]
    context: Vec<String>,
    #[serde(rename = "issuanceDate")]
    issuance_date: String,
    proof: Proof,
}

#[derive(Serialize, Deserialize, Debug)]
struct Root {
    #[serde(rename = "bidSize")]
    bid_size: u32,
    #[serde(rename = "eidIssuer")]
    eid_issuer: PublicKeyHolder,
    bank: PublicKeyHolder,
    person: PublicKeyHolder,
    #[serde(rename = "personCredential")]
    person_credential: Credential,
    #[serde(rename = "houseLoanCredential")]
    house_loan_credential: Credential,
}

fn prove_valid_bid(
    bid_size: u32,
    person_credential_jwt: &str,
    house_loan_credential_jwt: &str,
    eid_issuer_public_key: &str,
    bank_public_key: &str,
) -> Receipt {
    let input = (bid_size, person_credential_jwt, house_loan_credential_jwt, eid_issuer_public_key, bank_public_key);
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    prover.prove_elf(env, JWT_VERIFY_ELF).unwrap()
}

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    env_logger::init();

    // read json file from current directory
    let data = fs::read_to_string("./data.json").expect("Unable to read file");

    let root: Root = serde_json::from_str(&data).expect("JSON was not well-formatted");

    // Initialize variables
    let bid_size = root.bid_size;
    let public_key_eid = root.eid_issuer.public_key;
    let public_key_bank = root.bank.public_key;

    let person_credential = root.person_credential;
    let house_loan_credential = root.house_loan_credential;

    let receipt = prove_valid_bid(bid_size, &person_credential.proof.jwt, &house_loan_credential.proof.jwt, &public_key_eid, &public_key_bank);
    let (is_valid_bid, bidder_did): (u32, String) = receipt.journal.decode().unwrap();
    receipt.verify(JWT_VERIFY_ID).unwrap();

    println!("Receipt verified successfully!");
    println!("DID of the bidder: {:?}", bidder_did);
    println!("The bid is valid: {:?}", is_valid_bid);
}
